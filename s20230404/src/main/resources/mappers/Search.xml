<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.travelAlone.s20230404.SearchMapper">
	
	<!-- Search 테이블에 키워드가 존재하는 경우 update, 존재하지 않는다면 insert -->
	<insert id="siUpsert" parameterType="java.lang.String">
  		MERGE INTO search
  		USING dual
  		ON (s_keyword = #{keyword, jdbcType=VARCHAR})
  		WHEN MATCHED THEN
    		UPDATE SET s_count = s_count + 1
  		WHEN NOT MATCHED THEN
    	INSERT (search_id, s_keyword, s_count, create_date, modified_date)
    	VALUES (search_id_seq.nextval, #{keyword, jdbcType=VARCHAR}, 1, sysdate, sysdate)
	</insert>
	
	
	<!-- Travel 테이블의 t_name에 키워드가 존재하는 경우 t_count++ -->
	<update id="siTravelUpdate" parameterType="java.lang.String">
		update Travel
		set t_count = t_count + 1
		where t_name LIKE '%' || #{keyword} || '%'
	</update>
	
	
	<!-- House 테이블의 h_name에 키워드가 존재하는 경우 h_count++ -->
	<update id="siHouseUpdate" parameterType="java.lang.String">
		update House
		set h_count = h_count + 1
		where h_name LIKE '%' || #{keyword} || '%'
	</update>
	
	
	<!-- Restaurant 테이블의 r_name에 키워드가 존재하는 경우 r_count++ -->
	<update id="siResUpdate" parameterType="java.lang.String">
		update Restaurant
		set r_count = r_count + 1
		where r_name LIKE '%' || #{keyword} || '%'
	</update>
	
	
	<!-- Travel 테이블에 키워드가 존재하는지 조회 -->
	<select id="siTravelSearch" parameterType="java.lang.String" resultType="Travel">
		SELECT *
  		FROM Travel
  		WHERE t_name LIKE '%' || #{keyword} || '%' OR t_content LIKE '%' || #{keyword} || '%' OR t_address LIKE '%' || #{keyword} || '%'
	</select>
	
	
	<!-- House 테이블에 키워드가 존재하는지 조회 -->
	<select id="siHouseSearch" parameterType="java.lang.String" resultType="House">
  		SELECT *
  		FROM House
  		WHERE h_name LIKE '%' || #{keyword} || '%' OR h_content LIKE '%' || #{keyword} || '%' OR h_address LIKE '%' || #{keyword} || '%'
	</select>
	
	
	<!-- Restaurant 테이블에 키워드가 존재하는지 조회 -->
	<select id="siResSearch" parameterType="java.lang.String" resultType="Res">
  		SELECT *
  		FROM Restaurant
  		WHERE r_name LIKE '%' || #{keyword} || '%' OR r_content LIKE '%' || #{keyword} || '%' OR r_address LIKE '%' || #{keyword} || '%' OR r_menu LIKE '%' || #{keyword} || '%'
	</select>
	
	
	<!-- Board 테이블에 키워드가 존재하는지 조회 -->
	<select id="siBoardSearch" parameterType="java.lang.String" resultType="Board">
  		SELECT *
  		FROM Board
  		WHERE b_title LIKE '%' || #{keyword} || '%' OR b_content LIKE '%' || #{keyword} || '%'
	</select>
	
	
	<!-- 인기 검색어 조회 -->
	<select id="siGetPopularSearches" parameterType="CondDTO" resultType="Search">
		<![CDATA[
			SELECT s_keyword
            FROM (
                  SELECT *
                  FROM Search
                  WHERE create_date BETWEEN 
                        TO_DATE(#{startOfToday , jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS') AND 
                        TO_DATE(#{endOfToday   , jdbcType=VARCHAR}, 'YYYY-MM-DD HH24:MI:SS')
	              ORDER BY s_count DESC,
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[가-힣]+$') THEN 0 ELSE 1 END,
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[가-힣]+$') THEN s_keyword END,
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[a-zA-Z]+$') THEN 0 ELSE 1 END, 
	              CASE WHEN REGEXP_LIKE(s_keyword, '^[a-zA-Z]+$') THEN s_keyword END,
	              s_keyword  ) 
            WHERE ROWNUM <= 10
 		
		]]>
	</select>
	
	<!-- 자동 완성 데이터 조회 -->
	<select id="siAutoTSearch" parameterType="java.lang.String" resultType="java.util.List">
		<![CDATA[
			SELECT DISTINCT SUBSTR(t_name, start_pos, end_pos - start_pos) as t_name
	        FROM (
                 SELECT t_name, LEVEL as word_num,
                        INSTR(' ' || t_name || ' ', ' ', 1, LEVEL) as start_pos,
                        INSTR(' ' || t_name || ' ', ' ', 1, LEVEL + 1) as end_pos
                 FROM Travel
                 CONNECT BY LEVEL <= LENGTH(t_name) - LENGTH(REPLACE(t_name, ' ', '')) + 1
                 ) words
            WHERE SUBSTR(t_name, start_pos, end_pos - start_pos) LIKE '%' || #{keyword} || '%'
		]]>
	</select>
	
	<select id="siAutoHSearch" parameterType="java.lang.String" resultType="java.util.List">
		<![CDATA[
			SELECT DISTINCT SUBSTR(h_name, start_pos, end_pos - start_pos) as h_name
            FROM (
                 SELECT h_name, LEVEL as word_num,
                        INSTR(' ' || h_name || ' ', ' ', 1, LEVEL) as start_pos,
                        INSTR(' ' || h_name || ' ', ' ', 1, LEVEL + 1) as end_pos
                 FROM House
                 CONNECT BY LEVEL <= LENGTH(h_name) - LENGTH(REPLACE(h_name, ' ', '')) + 1
                 ) words
            WHERE SUBSTR(h_name, start_pos, end_pos - start_pos) LIKE '%' || #{keyword} || '%'
		]]>
	</select>
	
	<select id="siAutoRSearch" parameterType="java.lang.String" resultType="java.util.List">
		<![CDATA[
			SELECT DISTINCT SUBSTR(r_name, start_pos, end_pos - start_pos) as r_name
            FROM (
                 SELECT r_name, LEVEL as word_num,
                        INSTR(' ' || r_name || ' ', ' ', 1, LEVEL) as start_pos,
                        INSTR(' ' || r_name || ' ', ' ', 1, LEVEL + 1) as end_pos
                 FROM Restaurant
                 CONNECT BY LEVEL <= LENGTH(r_name) - LENGTH(REPLACE(r_name, ' ', '')) + 1
                 ) words
            WHERE SUBSTR(r_name, start_pos, end_pos - start_pos) LIKE '%' || #{keyword} || '%'
		]]>
	</select>
	
	
	
	<!-- 검색 횟수를 기준으로 인기 명소 구하기  -->
	<select id="sigetPopularT" resultType="Travel">
		<![CDATA[
			SELECT *
            FROM (
                  SELECT *
                  FROM Travel
                  ORDER BY t_count DESC
                 )
            WHERE ROWNUM <= 6
		]]>
	</select>
	
	<!-- 검색 횟수를 기준으로 인기 숙소 구하기  -->
	<select id="sigetPopularH" resultType="House">
		<![CDATA[
			SELECT *
            FROM (
                  SELECT *
                  FROM House
                  ORDER BY h_count DESC
                 )
            WHERE ROWNUM <= 6
		]]>
	</select>
	
	<!-- 검색 횟수를 기준으로 인기 맛집 구하기  -->
	<select id="sigetPopularR" resultType="Res">
		<![CDATA[
			SELECT *
            FROM (
                  SELECT *
                  FROM Restaurant
                  ORDER BY r_count DESC
                 )
            WHERE ROWNUM <= 6
		]]>
	</select>
	
	
</mapper>